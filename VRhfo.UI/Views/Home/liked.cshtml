
@model VRhfo.UI.ViewModels.ProfileViewModel
@{

}

<style>
    body {
        background: hsla(21, 50%, 73%, 1);
        background: linear-gradient(90deg, hsla(21, 50%, 73%, 1) 0%, hsla(313, 100%, 88%, 1) 100%);
        background: -moz-linear-gradient(90deg, hsla(21, 50%, 73%, 1) 0%, hsla(313, 100%, 88%, 1) 100%);
        background: -webkit-linear-gradient(90deg, hsla(21, 50%, 73%, 1) 0%, hsla(313, 100%, 88%, 1) 100%);
        filter: progid: DXImageTransform.Microsoft.gradient( startColorstr="#DCAE96", endColorstr="#FFC1F2", GradientType=1 );
    }

    .card-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 8px;
        justify-content: center;
        margin-top: 40px;
        padding: 0 0px; /* Added padding to the side   sfsfs */
        gap: 10px;
        margin-right: 90px;
        margin-left: 80px;
    }

    .card {
        border-radius: 15px;
        text-align: center;
        margin: 0;
        margin-top: 20px;
        border: none;
        background-color: #222;
        padding: 20px; /* Moved padding from .card-container to here */
        margin-top: 0px;
        padding: 0px; /* Moved padding from .card-container to here */
        width: 100%;
        overflow: hidden;
    }

    .vid-img {
        max-width: 100%; /* Changed from a fixed height to a max-width */
        height: auto; /* Ensures aspect ratio is maintained */
        border-radius: 8px 8px 8px 8px;
        height: 220px;
        padding: 1px;
        min-width: 200px;
        object-fit: cover;
    }

    .card:hover {
        -webkit-box-shadow: 10px 10px hotpink;
        box-shadow: 0 0 10px rgb(255, 0, 255);
        cursor: pointer;
        background-color: #333
    }

    .description {
        background-color: transparent;
        padding: 10px;
        margin: 0;
        font-size: small;
        text-align: left;
        height: 80px;
        color: #ffffff; /* added color white for text visibility on black background */
        height: auto;
    }

    p {
        color: darkgrey;
        margin: 0;
        padding: 0;
    }

    @@media (max-width: 1170px) {
        .card-container {
            grid-template-columns: repeat(2, 1fr); /* Create two equal-width columns */
        }
    }

    @@media (max-width: 660px) {
        .card-container {
            margin: 0;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        }
    }

    .page-title {
        position: relative;
        font-size: x-large;
        left: 80px;
        top: 30px;
        width: 500px;
        display: flex;
    }

    .card-time {
        color: white !important;
        font-weight: 600 !important;
        padding: 4px;
        font-size: 1rem;
        margin-bottom: 3px;
        margin-right: 7px;
        letter-spacing: -1px;
    }

    .card-img {
        position: relative;
    }

    .time-container {
        position: absolute;
        bottom: 0;
        right: 0;
        display: flex;
    }

    .clock-img {
        position: absolute;
        top: 7px;
        left: -15px;
    }

    .d-top-row {
        display: flex;
        justify-content: space-between;
    }

    .d-bottom-row {
        text-align: center;
        display: flex;
        justify-content: space-between;
    }

    .vid-title {
        max-width: 170px;
    }

    .profile-username {
        color: deepskyblue;
        width: 100%;
    }

    .titl {
        color: white;
    }
</style>

<div class="main-pg">
    <div class="page-title">
        <p class="titl"><span @* class="profile-username" *@> </span>favorites <img src="~/img/Yd60cw01.svg" height="40px" width="40px"/></p>
    </div>
    <div class="card-container">
        @foreach (var item in Model.Videos)
        {
            <div class="card" data-video-id="@item.Id"
                <a asp-controller="Video" asp-action="Watch" asp-route-title="@item.Title">
                    <div class="card-img">

                        <img class="vid-img" src="~/img/@item.ThumbnailUrl" alt="@item.Title" style="width: 100%;">
                        <div class="time-container">
                            <img src="~/img/clock2.png" height="13" width="13" class="clock-img">
                            <p class="card-time"> @item.FormattedDuration  </p>
                        </div>

                        
                    </div>

                    <div class="description">
                        <div class="d-top-row">
                            <h5 class="vid-title"> @item.Title </h5>
                            <p>
                                <img src="~/img/heart.svg" alt="Heart Icon" height="13" width="13">
                                @item.FormattedLikes
                            </p>
                        </div>
                        <div class="d-bottom-row">
                            <p>@item.Category</p>
                            @item.FormattedUploadDate
                        </div>
                    </div>
                </a>
                <div class="likeL like-yes" data-video-id=@item.Id></div>
            </div>
        }


    </div>
</div>

<script type="text/javascript">
    
        const likeButtons = document.querySelectorAll('.likeL');
        const currentUser = @Html.Raw(Json.Serialize(ViewBag.CurrentUser)); // Access the user from the ViewBag

        console.log(currentUser?.username + " " + currentUser?.id);

        likeButtons.forEach(button => {

              button.addEventListener('click', (event) => {
                
                    //   toggle like state
                    event.target.classList.toggle("like-noL");

                    const videoId = button.getAttribute('data-video-id');
                   
                    console.log("❌ Removing Favorite..." + videoId);

                        // Proceed with unliking the video
                         fetch(`/Video/Unlike/${videoId}`, {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                            'RequestVerificationToken': getAntiForgeryToken() // Include anti-forgery token
                                        },
                                    body: JSON.stringify({ videoId }) // Pass post ID in the request body
                          })
                            .then(response => response.json())
                            .then(data => {
                                console.log("Like count: " + data.likeCount);
                                // Handle success response
                                 const card = document.querySelector(`.card[data-video-id="${videoId}"]`);
                                    if (card) {
                                        card.remove();
                                    }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                // Handle error
                            });
                        

                });
        });

         // Function to retrieve the anti-forgery token from the page
        function getAntiForgeryToken() {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenElement ? tokenElement.value : '';
        }
</script>

<style>
    .likeL:hover {
        cursor: pointer;
    }

    .likeL {
        margin-top: 0px;
        height: 45px !important;
        width: 45px !important;
        position: absolute;
        top: 0;
        right: 0;
        z-index: 999;
        
    }

    .like-noL {
        background: url("/img/dislike.svg") no-repeat;
    }

    .like-yes {
        background: url("/img/like.svg") no-repeat;
        margin-right: 2px;
    }
</style>