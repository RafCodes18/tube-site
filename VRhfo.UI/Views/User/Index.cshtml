@model VRhfo.BL.Models.User 
@{
    ViewData["Title"] = "Index";
}
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap" rel="stylesheet">
<div class="profile-container">
    <div class="top-boxes">
        <div class="boxx leftt">

            <div class="username-title">@@@Model.Username <a asp-action="ManageAccount" asp-controller="User" asp-route-username="@Model.Username" class="edit-btn" type="button">Edit ↗</a> </div>
            <div class="tier-text">Subscription Tier: @Model.Subscription_Tier</div>

            <div class="user-stats">
                <div class="wt-title">
                    Watch Time 
                </div>
                <div class="wt-today wt">Today: <span id="daily-watch-time"></span></div>
                <div class="wt-week wt">This week: <span id="weekly-watch-time"></span></div>
                <div class="wt-month wt">Lifetime: <span id="lifetime-watch-time"></span> </div>
            </div>
            <div class="date-join-txt">Date Joined: @Model.FormattedUploadDateDMY</div>
        </div>
        <div class="boxx rightt">
            <div class="meter-title">
                <h2>GoonMeter &#8482;</h2>
                <div class="meter-container">
                    <div class="choose-level center">
                        <input type="radio" id="0" name="level" value="0" />
                        <label for="0">0</label>
                        <input type="radio" id="1" name="level" value="1" />
                        <label for="1">1</label>
                        <input type="radio" id="2" name="level" value="2" />
                        <label for="2">2</label>
                        <input type="radio" id="3" name="level" value="3" />
                        <label for="3">3</label>                         
                    </div>
                    <div class="meter">
                        <div class="outer-circle center">
                            <div class="inner-circle">
                                <div class="needle center"></div>
                            </div>
                        </div>
                    </div>
                    <div class="label">
                        <span>GoonScore: @Model.GoonScore</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
        <div class="bottom-boxes">
        <div class="boxx top">
            <div class="tasks-title">
                <h3>Completed Tasks</h3>                
            </div>
            <div class="tasks-container">
                <div class="grid-container">
                    <div class="grid-item">
                        <input type="checkbox" name="checkbox-checked">
                    </div>
                    <div class="grid-item">                        <input type="checkbox" name="checkbox-checked">
</div>
                    <div class="grid-item">                        <input type="checkbox" name="checkbox-checked">
</div>
                    <div class="grid-item">
                        <input type="checkbox" name="checkbox-checked">
                    </div> <div class="grid-item">
                        <input type="checkbox" name="checkbox-checked">
                    </div> <div class="grid-item">
                        <input type="checkbox" name="checkbox-checked">
                    </div> <div class="grid-item">
                        <input type="checkbox" name="checkbox-checked">
                    </div>
          
                    <!-- Add as many items as needed -->
                </div>
            </div>
        </div>
        <div class="boxx bottom">
            <div class="history-title">
                <h3>Watch History</h3>
            </div>
            <div class="tasks-container">
                <div class="watched-today">
                    Today
                </div>
                @foreach(var item in Model.VideosWatchedToday)
                {            
                    <a asp-action="Watch" asp-controller="Video" asp-route-title="@item.Title">
                        <div class="task">
                            <div class="img-and-title">
                                <img src="@item.ThumbnailUrl" height="20" width=20 />
                                <p>@item.Title</p>
                            </div>
                            <p>@item.FormattedDuration</p>
                        </div>
                    </a>
                }
                <div class="watched-week">
                    Last 7 Days
                </div>
                @foreach (var item in Model.VideosWatchedPastWeek)
                {
                    <a class="row-title" asp-action="Watch" asp-controller="Video" asp-route-title="@item.Title">
                        <div class="task">
                            <div class="img-and-title">
                                <img src="@item.ThumbnailUrl" height="20" width=20 />
                                <p>@item.Title</p>
                            </div>
                            <p>@item.Duration</p>
                        </div>
                    </a>
                }

                <div class="watched-week">
                   All
                </div>
                @foreach (var item in Model.RestOfVideosWatched)
                {
                    <a asp-action="Watch" asp-controller="Video" asp-route-title="@item.Title">
                        <div class="task">
                            <div class="img-and-title">
                                <img src="@item.ThumbnailUrl" height="28" width="28" />
                                <p>@item.Title</p>
                            </div>
                            <p>@item.Duration</p>
                        </div>
                    </a>
                }
            </div>           
        </div>
    </div>
</div>
<style> 
    h3{
        padding: 10px;
        margin-bottom: -20px !important;
    }
    .img-and-title img{
        border-radius: 2px;
        margin-right: 4px;
    }
    .row-title{
        
    }
    input[type="checkbox"] {
        appearance: none;
        background-color: #fff;
        margin: 0;
        font: inherit;
        color: currentColor;
        width: 1.75em;
        height: 1.75em;
        border: 0.15em solid currentColor;
        border-radius: 0.15em;
        transform: translateY(-0.075em);
        margin-top: 14px;
        margin-left: 10px;
    }
    .grid-container {
        display: grid;
        grid-template-columns: repeat(2, 1fr); /* 3 equal columns */
        gap: 10px; /* Optional, controls spacing between grid items */
        padding: 10px; /* Optional, adds padding around the grid */
    }

    .grid-item {
        background-color: #111;
        text-align: center;
        border: 1px solid #ccc; 
        height: 80px;
        border-radius: 10px;
    }
    .img-and-title{
        display: flex;
    }
    @@media(max-width: 1000px){
        .grid-container {
            grid-template-columns: repeat(1, 1fr); /* 3 equal columns */
        }
    }
    @@media(min-width: 1000px){
        .task{
            max-width: 700px;
        }
    }
    .boxx.top, .boxx.bottom{
        overflow-y: scroll;
    }
    .tasks-container{
        position: relative;
        display: flex;
        flex-direction: column;
        margin-top: 13px;
        padding: 10px;
    }
    .task{
        position: relative;
        height: 49px;
        width: 96%;
        background-color: #111;
        border: 1px solid #444;
        padding: 10px;
        margin: 3px 10px;
        border-radius: 10px;
        display: flex;
        justify-content: space-between;
    }
    .task:hover{
        background-color: #222;
    }
    .meter-container{
        position: relative;
         
    }
    .choose-level{
        width: 100%;
    }
    .choose-level label{
        padding: 5px 10px;
        margin: 0 5px;
        cursor: pointer;
        box-shadow: -1px 2px 1px #d3d3d3;
        border-radius: 10px;
    }
    .choose-level input[type="radio"]{
        display: none;        
    }
    .choose-level input[type="radio"]:checked + label{
        background-color: #555;
        color: black;
        font-weight: bold;
        box-shadow: none;        
    }
    .meter{
        position: relative;
        height: 100px;
        width: 100%;
        overflow: hidden;        
    }
    .outer-circle{
        position: relative;
        height: 180px;
        width: 100%;
        border-radius: 50% 50% 0 0 ;
        background-image: linear-gradient(to right,
                            rgba(100,100,100),
                            rgba(150,150,150),
                            rgba(200,200,200)                            
        );
        margin-top: 10px;        
    }
    .center{
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .inner-circle{
        height: 55%;
        width: 55%;
        border-radius: 50% 50% 0 0;
        background: #000;
        align-items: center;
    }
    .needle{
        position: relative;
        top: calc(50% - 15px);
        left: 50%;
        transform: translate(-50%, -50%);
        height: 20px;
        width: 20px;
        background-color: white;
        border-radius: 50%;
        transition: transform 0.3s ease;
        transform: translate(-50%, -50%) rotate(-100deg);
    }
    .needle::before{
        content: "";
        position: relative;
        top: -130%;
        width: 15px;
        height: 55px;
        background-color: #fff;
            clip-path: polygon(0% 100%, 50% 0%, 100% 100%);
            border-radius: 0 0 20px 20px;
    }
    .needle::after{
        content:"";
        position: absolute;
        height: 10px;
        width: 10px;
        background-color: #333;
        border-radius: 50%;
        border: 2px solid #f1f1f1;
    }
    .label{
        height: 50px;
        width: 100%:
        user-select: none;
    }



    .black-nav {
        background: #000 !important;
    }
    .profile-container{
        font-family: "Open Sans", sans-serif;
        font-weight: 600;
    }
    .tier-text{
        font-size: large;
        color: #666;
        letter-spacing: .1rem;
        margin-top: 8px;
    }
    .wt-title{
        color: #999;
        font-size: 16px;
    }
    .wt{
        font-size: 13px;
    }
    .boxx.rightt{
        display: flex;
        justify-content: center;
    }
    .edit-btn{
        background: none;
        color: #999;
        border: none;
        padding: 0;
        font: inherit;
        cursor: pointer;
        outline: inherit;
        text-decoration: underline;
    }
    .date-join-txt{
        text-align: end;
        color: #666;
    }
    .user-stats{
        margin-left: 7px;
        margin-top: 3px;
    }
    .wt-title{
        font-weight: 700;
    }
    .boxx.leftt {
        padding: 15px !important;
    }
    .username-title{
        font-size: x-large;
        color: deepskyblue;
        display: flex;
        justify-content: space-between;
    }
    .profile-container {
        width: 100%;
        max-width: 70vw !important;
        display: flex;
        flex-direction: column;
    }

    .top-boxes, .bottom-boxes {
        display: flex;
        width: 100%;
    }

    .top-boxes {
        height: 200px;
        margin-top: 30px;
    }

    .bottom-boxes {
        flex-direction: column;
        margin-top: 15px;
        max-width: 95%;
        min-width: 300px !important;
    }

    .boxx {
        width: 100%;
        max-width: 100vw;
        padding: 5px;
        margin: 5px;
        border-radius: 8px;
        color: #888;
    }
    .bottom{
            height: 700px !important;
    }
    .top-boxes .boxx {
        height: 200px;
    }

    .bottom-boxes .boxx {
        height: 300px;
        margin-bottom: 10px;
        max-width: 99% !important;
    }

    @@media (max-width: 1000px) {
        .top-boxes {
            flex-direction: column;            
            margin-top: 70px !important;
            height: 240px;
        }           
        .profile-container{
            margin-left: 14px;
            max-width: 90vw !important;
        }
        .boxx.top, .boxx.bottom{
           max-width: 90% !important;
        }
        .top-boxes .boxx {
            height: 90% !important;
        }
        .bottom-boxes{
            margin-top: 195px !important;
            max-width: 100% !important ;
        }
        .date-join-txt{
            font-size: 10px;
            margin-top: 4px;
        }
        .wt{
            font-size: 12px !important;
        }
        .tier-text{
            font-size: 15px;
            letter-spacing: 0;
        }
        .img-and-title p{
            font-size: smaller !important;
        }
        .task{
            width: 100% !important;
            margin-left: 0 !important;
        }
        .boxx{
            padding: 0 !important;
        }

    }

    /* Optional: for visualization purposes */
    .boxx{
        outline: 1px solid grey;        
    }


    input[type="checkbox"] {
        /* Add if not using autoprefixer */
        -webkit-appearance: none;
        appearance: none;
        background-color: #000 !important;
        margin: 0;
    }

    input[type="checkbox"] {
        /* ...existing styles */
        display: grid;
        place-content: center;
    }

        input[type="checkbox"]::before {
            content: "";
            width: 1.35em;
            height: 1.57em;
            transform: scale(0);
            transition: 120ms transform ease-in-out;
            box-shadow: inset 1em 1em var(--primary-color);
        }

        input[type="checkbox"]:checked::before {
            transform: scale(1);
        }

        input[type="checkbox"]:checked .left {
            background: darkgreen !important;
        }

        input[type="checkbox"]::before {
            /* ...existing styles */

            transform-origin: bottom left;
            clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
        }

    input[type="checkbox"] {
        appearance: none;
        background-color: #fff;
        margin: 0;
        font: inherit;
        color: currentColor;
        width: 1.75em;
        height: 1.75em;
        border: 0.15em solid currentColor;
        border-radius: 0.15em;
        transform: translateY(-0.075em);
        margin-top: 14px;
        margin-left: 10px;
    }
</style>

<script>

    document.addEventListener('DOMContentLoaded', function () {
        const userId = '@Model.Id'; // Replace this with your actual user ID retrieval

        fetch(`/User/GetWatchTime?userId=${userId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                    console.log("error")
                }
                return response.json();
            })
            .then(data => {
                //here i should only be returning the seconds value, then with JS format it to 3h 12m, or 2d 1h 45m, or 4m)
               
                // Helper function to format seconds into human-readable time
                function formatTime(seconds) {
                    const days = Math.floor(seconds / (3600 * 24));
                    seconds %= 3600 * 24;
                    const hours = Math.floor(seconds / 3600);
                    seconds %= 3600;
                    const minutes = Math.floor(seconds / 60);
                    const remainingSeconds = seconds % 60;

                    let timeString = '';

                    if (days > 0) timeString += `${days}d `;
                    if (hours > 0) timeString += `${hours}h `;
                    if (minutes > 0) timeString += `${minutes}m `;
                    if (remainingSeconds > 0 && days === 0) timeString += `${remainingSeconds}s`; // Only show seconds if no days

                    return timeString.trim();
                }

                // Use the helper function to format and display the watch times
                document.getElementById('daily-watch-time').textContent = `${formatTime(data.daily)}`;
                document.getElementById('weekly-watch-time').textContent = `${formatTime(data.weekly)}`;
                document.getElementById('lifetime-watch-time').textContent = `${formatTime(data.lifetime)}`;
            })
            .catch(error => {
                console.error('Error fetching watch time stats:', error);
            });
    });
</script>

<script defer>
    const outerCircle = document.querySelector(".outer-circle");
    const needle = document.querySelector(".needle");
    const label = document.querySelector(".label span");
    const radioB = document.querySelectorAll("input[name='level']");

    function beginner() { 
        console.log("BEGIN");
        outerCircle.style.backgroundImage = "linear-gradient(to right, rgb(234,62,62) 10%, rgb(150,150,150) 25%, rgb(200,200,200) 100%)";
        needle.style.transform = "translate(-50%, -50%) rotate(-100deg)";
        label.textContent = "Porn Addict";
    }
    function intermediate() {
        console.log("inter");
        outerCircle.style.backgroundImage = "linear-gradient(to right, rgb(234,62,62) 10%, yellow 55%, rgb(200,200,200) 100%)";
        needle.style.transform = "translate(-50%, -50%) rotate(0deg)";
        label.textContent = "Gooner";
    }
    function expert() {
        console.log("expert");
        outerCircle.style.backgroundImage = "linear-gradient(to right, rgb(234,62,62) 10%, yellow 55%, rgb(13,255,0) 100%)";
        needle.style.transform = "translate(-50%, -50%) rotate(90deg)";
        label.textContent = "Pornosexual";
    }

    radioB.forEach(radioBtn => {
        radioBtn.addEventListener("change", () => {
            changeLevel(radioBtn.value);
        });
    });

    function changeLevel(value) {
        if (value == 1) {
            beginner();
            console.log("1");
        } else if (value == 2) {
            intermediate();
        } else if (value == 3) {
            expert();
        }        
    }
</script>            