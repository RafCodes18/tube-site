@model VRhfo.BL.Models.User
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

<link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Account Management</title>
    <style>
        :root {
            --text-color: #000;
            --background-color: #000;
            --primary-color: #7fff00;
            --primary-color-hover: rgba(191, 255, 0, .7);
            --primary-color-card-hover: rgba(291, 255, 200, .1);
            --secondary-color: #262727;
            --accent-color: #97a7b3;
            --primary-color-dark: rgba(24, 30, 0, 1);
            --join-now-hover: #6bdd00;
            --btn-hover-shadow: 0 5px 15px rgba(119, 255, 0, 0.35), 0 0 8px rgba(55, 148, 0, 0.5);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: rgb(21, 21, 21) !important;
        }


     
     

        .custom-navbar {
            background-color: #212121 !important;
        }

        .container {
            max-width: 90vw;
            margin: 0 auto;
            background: #151515;
            backdrop-filter: blur(10px);
            border-radius: 10px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            margin-top: 30px;
         }
 
        .header {
            background: #212121;
            color: white;
            padding: 10px;
            text-align: center;
            border-radius: 0px;
        }

            .header h1 {
                font-size: 2.5rem;
                font-weight: 700;
                margin-bottom: 10px;
                color: #cacaca;
            }

            .header p {
                opacity: 0.9;
                font-size: 1.1rem;
            }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            padding: 40px;
        }

        .section {
            background: #212121;
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

            .section h2 {
                font-size: 1.8rem;
                margin-bottom: 25px;
                color: var(--accent-color);
                display: flex;
                align-items: center;
                gap: 10px;
            }

                .section h2::before {
                    content: '';
                    width: 4px;
                    height: 30px;
                    background: linear-gradient(135deg, #7fff00, #379400);
                    border-radius: 2px;
                }

        .form-group {
            margin-bottom: 25px;
        }

            .form-group label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #555;
                font-size: 0.95rem;
            }

            .form-group input {
                width: 100%;
                padding: 14px 16px;
                border: 2px solid #898989;
                border-radius: 10px;
                font-size: 1rem;
                transition: all 0.3s ease;
                background: #333;
                color: #666;
            }

                .form-group input:focus {
                    outline: none;
                    border-color: var(--primary-color);
                    background: #313131;
                    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                    color: white;
                }

                .form-group input:disabled {
                    background: #333;
                    cursor: not-allowed;
                }

        .edit-btn {
            background: linear-gradient(135deg, #7fff00, #379400);
            color: #222;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

            .edit-btn:hover {
                transform: translateY(-2px);
                box-shadow: var(--btn-hover-shadow);
            }

            .edit-btn:disabled {
                background: #95a5a6;
                cursor: not-allowed;
                transform: none;
            }

        .cancel-edit-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

            .cancel-edit-btn:hover {
                background: #c0392b;
                transform: translateY(-2px);
            }

        .save-btn {
            background: linear-gradient(135deg, #7fff00, #379400);
            color: #222;
            border: none;
            padding: 14px 30px;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }

            .save-btn:hover {
                transform: translateY(-2px);
                box-shadow: var(--btn-hover-shadow);
            }

            .save-btn:disabled {
                background: #95a5a6;
                cursor: not-allowed;
                transform: none;
            }

        .subscription-card {
            background: linear-gradient(135deg, #7fff00 0%, #101010 50%, #379400 100%);
            color: white;
            border-radius: 16px;
            padding: 25px;
            margin-bottom: 20px;
            position: relative;
            overflow: hidden;
            border: 1px dashed var(--primary-color) !important;
        }

            .subscription-card::before {
                content: '';
                position: absolute;
                top: 0;
                right: 0;
                width: 100px;
                height: 100px;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 50%;
                transform: translate(30px, -30px);
            }

            .subscription-card h3 {
                font-size: 1.5rem;
                margin-bottom: 10px;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .subscription-card .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 4px 12px;
                border-radius: 20px;
                font-size: 0.8rem;
                font-weight: 500;
            }

            .subscription-card .next-charge {
                margin-top: 15px;
                opacity: 0.9;
                font-size: 0.95rem;
            }

        .subscription-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .subscription-option {
            background: #363636;
            border: 1px dashed var(--primary-color) !important;
            border-radius: 12px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
         }

            .subscription-option:hover {
                border-color: #667eea;
                box-shadow: var(--btn-hover-shadow);
            }

            .subscription-option.disabled {
                opacity: 0.6;
                cursor: not-allowed;
            }

            .subscription-option h4 {
                font-size: 1.2rem;
                margin-bottom: 5px;
                color: var(--accent-color);
            }

            .subscription-option .price {
                font-size: 1.1rem;
                font-weight: 600;
                color: #667eea;
            }

        .upgrade-btn {
            background: linear-gradient(135deg, #7fff00, #379400);
            color: #222;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 10px;
        }

            .upgrade-btn:hover {
                transform: translateY(-2px);
                box-shadow: var(--btn-hover-shadow);
            }

        .cancel-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 10px;
            margin-left: 10px;
        }

            .cancel-btn:hover {
                background: #c0392b;
                transform: translateY(-2px);
            }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: #222;
            margin: 15% auto;
            padding: 30px;
            border-radius: 16px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s ease-out;
            color: white;
        }

        @@keyframes modalSlideIn {
            from

        {
            transform: translateY(-50px);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }

        }

        .modal h3 {
            color: var(--accent-color);
            margin-bottom: 20px;
            font-size: 1.4rem;
        }

        .modal .form-group {
            margin-bottom: 20px;
        }

        .modal-buttons {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .modal-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .modal-btn.primary {
                background: linear-gradient(135deg, #7fff00, #379400);
                color: #222;
            }

            .modal-btn.secondary {
                background: #797979;
                color: white;
            }

            .modal-btn:hover {
                transform: translateY(-2px);
            }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 0.9rem;
        }

            .alert.success {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }

            .alert.error {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
@@media(min-width: 1000px){
            .container {
                margin-right: 20px;
                margin-left: 20px;
            }
}
        /* Mobile Responsive */
        @@media(max - width: 1000px)

        {
            .center-footer

        {
            margin-top: 100px !important;
        }

        }
        @@media (max-width: 1000px) {
         
        .center-footer
        {
            margin-top: 100px !important;
        }

        .main-content {
            grid-template-columns: 1fr;
            gap: 30px;
            padding: 16px 0px;
        }

        

            .header h1 {
                font-size: 2rem;
            }

        .section {
            padding: 20px;
        }

        .modal-content {
            margin: 30% auto;
            width: 95%;
        }

        .modal-buttons {
            flex-direction: column;
        }

        .modal-btn {
            width: 100%;
        }

        .container {
            margin-top: 100px;
        }

        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Account Management</h1>
            <p>Manage your account settings and subscription</p>
        </div>

        <div class="main-content">
            <div class="section">
                <h2>Account Settings</h2>

                <div id="alert-container"></div>

                <div class="form-group">
                    <label for="username">Username</label>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <input type="text" id="username" value="@Model.Username" disabled>
                        <button class="edit-btn" id="username-btn" onclick="editField('username')">Edit</button>
                    </div>
                </div>

                <div class="form-group">
                    <label for="email">Email Address</label>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <input type="email" id="email" value="@Model.Email" disabled>
                        <button class="edit-btn" id="email-btn" onclick="editField('email')">Edit</button>
                    </div>
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <input type="password" id="password" value="••••••••" disabled>
                        <button class="edit-btn" id="password-btn" onclick="editField('password')">Edit</button>
                    </div>
                </div>

                <button class="save-btn" id="saveBtn" onclick="saveChanges()" disabled>Save Changes</button>
            </div>

            <div class="section">
                <h2>Subscriptions</h2>

                <div class="subscription-card">
                    <h3>
                        Monthly
                        <span class="status">Active</span>
                    </h3>
                    <div class="next-charge">Your next charge of $20.00 will be processed on 10/21/2024</div>
                    <button class="cancel-btn" onclick="cancelSubscription()">Cancel</button>
                </div>

                <div class="subscription-options">
                    <div class="subscription-option">
                        <h4>Yearly</h4>
                        <div class="price">$200/year (Save 17%)</div>
                        <button class="upgrade-btn" onclick="upgradeSubscription('yearly')">Upgrade and Save</button>
                    </div>

                    <div class="subscription-option">
                        <h4>Lifetime</h4>
                        <div class="price">$500 one-time</div>
                        <button class="upgrade-btn" onclick="upgradeSubscription('lifetime')">Upgrade and Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Password Confirmation Modal -->
    <div id="passwordModal" class="modal">
        <div class="modal-content">
            <h3>Confirm Your Password</h3>
            <p style="color: #666; margin-bottom: 20px;">Please enter your current password to continue.</p>
            <div class="form-group">
                <label for="currentPassword">Current Password</label>
                <input type="password" id="currentPassword" placeholder="Enter your current password">
            </div>
            <div class="modal-buttons">
                <button class="modal-btn secondary" onclick="closeModal()">Cancel</button>
                <button class="modal-btn primary" onclick="confirmPassword()">Confirm</button>
            </div>
        </div>
    </div>

    <script>
            let currentEditField = null;
            let originalValues = {};
            let hasChanges = false;
            let editingFields = {}; // Track which fields are being edited

            // Store original values
            document.addEventListener('DOMContentLoaded', function() {
                const fields = ['username', 'email', 'password'];
                fields.forEach(field => {
                    const input = document.getElementById(field);
                    originalValues[field] = input.value;
                });
            });

            function editField(fieldName) {
                const input = document.getElementById(fieldName);
                const saveBtn = document.getElementById('saveBtn');

                if (fieldName === 'email' || fieldName === 'password') {
                    // For sensitive fields, show password modal first
                    currentEditField = fieldName;
                    showPasswordModal();
                } else {
                    // For username, enable editing directly
                    enableFieldEditing(fieldName);
                }
            }

            function enableFieldEditing(fieldName) {
                const input = document.getElementById(fieldName);
                const btn = document.getElementById(fieldName + '-btn');

                input.disabled = false;
                input.focus();

                // Change button to cancel
                btn.textContent = 'Cancel';
                btn.className = 'cancel-edit-btn';
                btn.onclick = function() { cancelEdit(fieldName); };

                if (fieldName === 'password') {
                    input.type = 'text';
                    input.value = '';
                    input.placeholder = 'Enter new password';
                }

                editingFields[fieldName] = true;
                hasChanges = true;
                updateSaveButton();

                // Add event listener for changes
                input.addEventListener('input', function() {
                    hasChanges = true;
                    updateSaveButton();
                });
            }

            function cancelEdit(fieldName) {
                const input = document.getElementById(fieldName);
                const btn = document.getElementById(fieldName + '-btn');

                // Reset input to original value
                input.value = originalValues[fieldName];
                input.disabled = true;

                // Reset password field display
                if (fieldName === 'password') {
                    input.type = 'password';
                    input.placeholder = '';
                }

                // Change button back to edit
                btn.textContent = 'Edit';
                btn.className = 'edit-btn';
                btn.onclick = function() { editField(fieldName); };

                // Remove from editing fields
                delete editingFields[fieldName];

                // Check if any fields are still being edited
                hasChanges = Object.keys(editingFields).length > 0;
                updateSaveButton();
            }

            function showPasswordModal() {
                document.getElementById('passwordModal').style.display = 'block';
                document.getElementById('currentPassword').focus();
            }

            function closeModal() {
                document.getElementById('passwordModal').style.display = 'none';
                document.getElementById('currentPassword').value = '';
                currentEditField = null;
            }

            function confirmPassword() {
                const currentPassword = document.getElementById('currentPassword').value;

                if (!currentPassword) {
                    showAlert('Please enter your current password.', 'error');
                    return;
                }

                // Simulate password verification (replace with actual API call)
                if (currentPassword === 'correctpassword') {
                    closeModal();
                    enableFieldEditing(currentEditField);
                    showAlert('Password verified. You can now edit your ' + currentEditField + '.', 'success');
                } else {
                    showAlert('Incorrect password. Please try again.', 'error');
                }
            }

            function updateSaveButton() {
                const saveBtn = document.getElementById('saveBtn');
                saveBtn.disabled = !hasChanges;
            }

            function saveChanges() {
                if (!hasChanges) return;

                const fields = ['username', 'email', 'password'];
                const changes = {};

                fields.forEach(field => {
                    const input = document.getElementById(field);
                    if (!input.disabled && input.value !== originalValues[field]) {
                        changes[field] = input.value;
                    }
                });

                if (Object.keys(changes).length === 0) {
                    showAlert('No changes to save.', 'error');
                    return;
                }

                // Simulate API call
                setTimeout(() => {
                    // Update original values and reset all edited fields
                    Object.keys(changes).forEach(field => {
                        originalValues[field] = changes[field];
                        const input = document.getElementById(field);
                        const btn = document.getElementById(field + '-btn');

                        input.disabled = true;

                        // Reset button to edit state
                        btn.textContent = 'Edit';
                        btn.className = 'edit-btn';
                        btn.onclick = function() { editField(field); };

                        if (field === 'password') {
                            input.type = 'password';
                            input.value = '••••••••';
                        }
                    });

                    // Reset state
                    editingFields = {};
                    hasChanges = false;
                    updateSaveButton();
                    showAlert('Changes saved successfully!', 'success');
                }, 1000);
            }

            function showAlert(message, type) {
                const container = document.getElementById('alert-container');
                const alert = document.createElement('div');
                alert.className = `alert ${type}`;
                alert.textContent = message;

                container.innerHTML = '';
                container.appendChild(alert);

                setTimeout(() => {
                    alert.remove();
                }, 5000);
            }

            function cancelSubscription() {
                if (confirm('Are you sure you want to cancel your subscription?')) {
                    showAlert('Subscription cancelled successfully.', 'success');
                    // Simulate subscription cancellation
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                }
            }

            function upgradeSubscription(plan) {
                if (confirm(`Are you sure you want to upgrade to the ${plan} plan?`)) {
                    showAlert(`Upgrading to ${plan} plan...`, 'success');
                    // Simulate upgrade process
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                }
            }

            // Close modal when clicking outside
            window.onclick = function(event) {
                const modal = document.getElementById('passwordModal');
                if (event.target === modal) {
                    closeModal();
                }
            }

            // Handle Enter key in password modal
            document.getElementById('currentPassword').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    confirmPassword();
                }
            });
              document.addEventListener('DOMContentLoaded', function () {
            const sidebar = document.getElementById('sidebar');
            const toggleButton = document.getElementById('toggleSidebar');
            const main = document.querySelector('main');

            // if (main) main.classList.add('sidebar-closed');
            // if (sidebar) sidebar.classList.add('closed');

            const likeButtons = document.querySelectorAll('.likeL');
            // const currentUser = @Html.Raw(Json.Serialize(ViewBag.CurrentUser)); // Access the user from the ViewBag
        });
    </script>
</body>
</html>