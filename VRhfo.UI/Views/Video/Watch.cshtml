@model VRhfo.UI.Views.ViewModels.VideoViewModel

@{
    ViewData["Title"] = "Video - vrhfo.com";


}

<style>
    <!-- DIAMOND AND LIKE BUTTONS -->
    .o-icon-svg {
        pointer-events: none;
        display: block;
        width: 100%;
        height: 100%;
    }

    .o-icon {
        display: -webkit-inline-box;
        display: -ms-inline-flexbox;
        display: inline-flex;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        position: relative;
        vertical-align: middle;
        fill: grey;
        width: 24px;
        height: 24px;
    }

    <!--SUGGESTED VIDEOS -->
    .suggested{
        margin-left: 20px;
    }

    <!--VIDEO DETAILS CONTAINER -->
    .vid-details{
        margin-left: 110px;
        margin-top: 15px;       
    }
    .lik-box{
        padding: 0;
        height: 30px;
        background-color: black;
        margin-bottom: -20px;
    }
        .lik-box.p {
            padding: 22px;
        }

        .sug{
        border-radius: 10px !important;
        
        }

        .sug-card{
            width: 100px;
            margin-left: 40px;
            margin-right: 8px;
    }
    .sug-card:hover{
            z-index: 999;
        }
      
        .sug-img{
           width: 215px;
        }
        .sug-img:hover{
        -webkit-box-shadow: 10px 10px hotpink;
        box-shadow: 0 0 10px rgb(255, 0, 255);
        z-index: -999;
        }

        .vid{
            margin-left: 50px;
        }    
    .sug-title{
        width: 200px;
        flex-wrap: wrap;
    }
    .vid-details-top-row{
        display: flex;
        justify-content: space-between;
    }
    .vid-details-top-row p {
        font-size: large;
    }
    .page-left-container{
        max-width: 70%;
        margin-left: 120px;
    }
    .vid-player{
        height: 500px; width: 700px;
    }


    .canvas-container {
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 26px;
        flex-direction: column;
        
    }

    #videoCanvas {
/*         outline: 1px solid white;
 */         max-width: 100%;
        height: auto;
    }

    .canvas-details{
        width: 100%;
        justify-content: flex-end;
     }


     @@media (max-width: 1109px) {
        /* Styles for screens below 1110 pixels */
        .canvas-container {
            width: 100%;
        }

        #videoCanvas {
            width: 100%;
            height: auto;
        }

        /* Add additional styles for other elements */
        .page-left-container {
            max-width: 100%;
        }

        .vid-details {
            margin-left: 0;       
        }

        .suggested {
            margin-left: 0;
            grid-template-columns: repeat(2, 1fr); /* Adjust the number of columns as needed */
        }
     }

    @@media (max-width: 715px) {
        main{
            flex-direction: column !important;
        }
        .page-left-container{
            margin: 0;
            margin-top: 0;
        }
        .canvas-container{
            margin-top: -10px !important;
        }
    }

    @@media (max-width: 1125px){
        .page-left-container{
            margin-left: 0 !important;
        }
    }

<!--END MEDIA QUERIES -->
 
    .pb-3{
        margin-top: 300px !important;
    }
</style>

 
<div class="page-left-container">

    @if (Model.video.Title == "Lana Rhoades")
    {
        <!-- Video Player -->
        <div class="vid-player">
            <video class="vid" width="700" height="500" controls>
                <source src="~/video/@Model.video.VideoUrl" type="video/mp4" >
                Your browser does not support the video tag.
            </video>
        </div>
        <!--Vid details-->
        <div class="vid-details">
            <div class="vid-details-top-row">
                <h2>@Model.video.Title</h2>
                <p>@Model.video.AverageRating</p>
            </div>
            <div class="vid-details-bottom-row">
                <p>@Model.video.Category</p>
            </div>
        </div>
    }
    else
    {
        <!-- Canvas Player -->
        <div class="canvas-container">
            <canvas id="videoCanvas"></canvas>
            <!--Vid details-->
            <div class="canvas-details">
                <div class="vid-details-top-row">
                    <h2>@Model.video.Title</h2>
                    <p>                      
                        <svg class="o-icon o-icon-svg" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path d="M1 22h4V10H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 2 7.59 8.59C7.22 8.95 7 9.45 7 10v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z" fill-rule="nonzero"></path>
                        </svg>
                            @Model.video.FormattedLikes  |
                        <svg class="o-icon o-icon-svg" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M23 2h-4v12h4V2zM1 13c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 22l6.58-6.59c.37-.36.59-.86.59-1.41V4c0-1.1-.9-2-2-2H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2z" fill-rule="nonzero"></path></svg>    @Model.video.FormattedDislikes
                    </p>
                </div>
                <div class="vid-details-bottom-row">
                    <p>@Model.video.Category</p>
                </div>
            </div>
        </div>
       
    }

    <!--COMMMENT SECTION-->
    <div class="comments-section">
        <div class="comments-header">             
            <div class="comments-header-title">
                <div class="comments-header-title-left">
                    <p>Comments</p>
                    <span class=" dot ">• </span>
                    <span class="comments-number ">
                        @Model.video.Comments.Count
                    </span>
                </div>
                
                <div class="comments-header-title-right">
                    <div class="cht-new" id="cht-new">
                        <svg class="fire-svg" xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="grey" class="bi bi-fire" viewBox="0 0 16 16">
                            <path d="M8 16c3.314 0 6-2 6-5.5 0-1.5-.5-4-2.5-6 .25 1.5-1.25 2-1.25 2C11 4 9 .5 6 0c.357 2 .5 4-2 6-1.25 1-2 2.729-2 4.5C2 14 4.686 16 8 16m0-1c-1.657 0-3-1-3-2.75 0-.75.25-2 1.25-3C6.125 10 7 10.5 7 10.5c-.375-1.25.5-3.25 2-3.5-.179 1-.25 2 1 3 .625.5 1 1.364 1 2.25C11 14 9.657 15 8 15" />
                        </svg> 
                        <p>New</p>
                    </div>
                    <div class="cht-top" id="cht-top">
                        <span class="o-icon"><svg class="o-icon o-icon-svg" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M18.902 10.768l-6.676-6.67a.333.333 0 00-.473 0l-6.656 6.67a.333.333 0 00.237.568h3.67v8.33c0 .185.15.334.334.334h5.338c.184 0 .334-.15.334-.333v-8.33h3.656a.334.334 0 00.309-.207.331.331 0 00-.073-.362z" fill-rule="nonzero"></path></svg></span>
                        <p>Top</p>
                    </div>
                </div>
            </div>           
        </div>

        <!--ADD A COMMENT -->
        <div class="comments-input-container">
            <div class="avatar-container user-txt">
                <div class="avatar-circle">
                    <span class="avatar-letter">U</span>
                </div>

                <div class="comment-box">
                    <div class="comment-input" contenteditable="true" role="textbox"> <span class="placeholdert">Add a comment...</span> </div>
                </div>

            </div>
            <button class="comment-submit" id="btnComment">COMMENT</button>

        </div>
                        
        <!--LOOOP THROUGH EACH COMMENT -->
        @foreach (var comment in Model.video.Comments)
        {
            <div class="comment" data-datePosted=@comment.DatePosted>
                <div class="avatar-container">
                    <div class="avatar-circle">
                        <span class="avatar-letter">@comment.User.AvatarLetter</span>
                    </div>
                    <span class="diamond">
                        <svg class="o-icon o-icon-svg " viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8.06419 14.7411c-.10982-.0012-.21803-.0265-.31697-.0742-.09894-.0477-.18618-.1166-.25554-.2017L.672817 6.15741c-.10166-.1231-.161673-.27526-.171411-.43461-.009738-.15935.0313-.31768.117215-.45224L3.00522 1.5931c.06641-.10241.15756-.18643.26503-.2443.10747-.05787.2278-.08772.34985-.08679l8.695.06208c.1236.00146.2448.03333.3531.0928.1083.05946.2002.14469.2677.24815l2.4389 3.70997c.0882.13302.1318.29072.1244.4502-.0075.15947-.0655.31243-.1658.43665L8.63276 14.475c-.06879.0842-.15557.1519-.25396.1981-.0984.0462-.2059.0698-.31461.069v-.001z" fill="#37C4B3"></path>
                            <path d="M10.9376 5.80361L8.06418 14.743 5.08044 5.76223l-4.578103-.0335c-.012524-.16198.028313-.3236.116275-.46018L3.00522 1.59306c.06943-.10727.16597-.19429.27984-.25225l2.91083 4.4293 3.60848.02562 2.84773-4.38792c.1124.05814.2109.14485.2838.25423L15.3748 5.373c.09.13702.1332.2995.1231.46313l-4.5603-.0335v.00098z" fill="#53E7D3"></path>
                            <path d="M7.96372 1.29253h.00788l2.966 4.51109-5.87486-.04237 2.90098-4.46872z" fill="#B9F5ED"></path>
                            <path opacity=".1" d="M2.64359 6.17018s4.98999 8.46842 4.84809 8.29592L.672817 6.15639c-.10166-.1231-.161673-.27526-.171411-.43461-.009738-.15935.0313-.31768.117215-.45224L3.00522 1.59307c.06618-.10278.15723-.18719.26472-.24541.10748-.05823.22793-.08837.35016-.08765l1.97077.01379c-.12214-.00082-.24253.02917-.35.08722-.10748.05804-.19858.14226-.26488.24486l-2.3866 3.67647c-.08614.13466-.12731.29319-.11757.45275.00974.15955.06988.3119.17177.43508z" fill="#000" ></path>
                        </svg>
                    </span>
                </div>
 

                <p class="content">@(comment.User.Username): @comment.Content</p>
            </div>
        }
    </div>

    <style>
        .placeholdert {
            color: #999;
            pointer-events: none;
        }
 
        .comment-submit{
            height: 30px;
            width: 100px;
            background-color: #555;
            border-radius: 3px;
            border: 0;
            position: relative;
            margin-top: auto;    
            margin-right: 15px;
        }
        .comment-submit:hover{
            background-color: #666;
        }
        .comment-box{
            display: flex;
            position: relative;
            height: auto;
            width: auto;

        }
        .comment-input{
            width: 400px !important;
            height: 30px;
            margin-left: 20px;
            border-bottom: 1px solid grey;
            overflow: auto;
        }
        .comments-input-container{
            display: flex;
            height: 50px; 
            justify-content: space-between;
            bottom: 0;
        }
        .user-txt{
            display:flex;
            margin-left: 20px;
           
        }
        .fire-svg{
            margin-top: 3px;
            margin-right: 3px;
        }
        .cht-top{
            display: flex;
            margin-left: 10px;
            padding-right: 10px;
            border-radius: 12px;
        }
        .cht-new{
            display: flex;
            padding: 0px 5px;
            border-radius: 12px;
            padding-right: 10px;
        }

        .cht-new:hover,.cht-top:hover{
            background-color: #444;
            cursor: pointer;
        }
        .comments-header-title-right{
            display: flex;
            margin-left: 30px;
        }
        .comments-header-title-left{
            display: flex;
             
        }

        .comments-section p{
            margin: 0 !important;
        }
        .avatar-container {
            width: 40px;
            height: 40px;
            min-width: 40px !important; /* Add this line */
            min-height: 40px;
            position: relative;
        }

        .avatar-circle {
            width: 100%;
            height: 100%;
            background-color: #444;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 40px !important; /* Add this line */
        }

        .avatar-letter {
            font-size: 16px;
            font-weight: bold;
            color: white;
        }

        .diamond {
            position: absolute;
            bottom: 6px;  
            right: -6px; 
            height: 10px !important;

        }
    .dot{
        margin-left: 10px;
    }
    .comments-number{
        padding: 0px 10px;
    }

        .comments-header {
            display: flex;
            position: relative;
            align-items: center;
            padding: 5px;
        }
        .comments-header-title{
            display: flex;
            height: 30px;  
            align-content: center;
        }
        .comments-section {
            display: grid;
            grid-template-columns: 1fr; /* Single column layout */
            gap: 10px; /* Adjust the gap between comments */
            background: #222;
            padding: 0 !important;
            margin: 0 !important;
            align-items: center;
            border-radius: 5px !important;
        }
 
        .comment {
            display: flex;
            gap: 8px;
            padding: 5px;
        }

            .comment .avatar {
                flex: 0 0 auto; /* Prevent avatar from shrinking */
                height: 30px;
                border-radius: 10px;                
            }

            .comment .content {
                flex: 1 1 auto; /* Allow content to grow/shrink */
            }
            main{
                display: flex;
                flex-direction: row;
            }

            .join-premium-container {
                background-image: url('https://front.sexlikereal.com/s/refactor/images/banners/bg-banner-premium-side.jpg');
                background-size: cover; /* This ensures the image covers the entire container */
                background-position: center; /* This centers the image within the container */
                background-repeat: no-repeat;
                display: flex;
                flex-direction: column;
                height: 130px; 
                width: 90%;
                justify-content: center;
                align-content: center;
                position: relative;
                left: 10px;
                background-color: #222;
                margin-top: 30px;
                border-radius: 6px;
                padding: 50px;
                text-align: center;
                border: 1px solid blue; 
                font-weight: bold;
            }
            .cta-text{
                
            }
            .suggested-videos{
                display: flex;     
                flex-direction: column;
                align-content: center;
                justify-content: center;
                margin-top: 10px;
                margin-left: 5px;
            }
            .video{
                display: flex;
                padding: 6px;
            }
            .video-title{
                padding-left: 5px;
            }

        .page-right-container {
            flex-grow: 1;
        }
    </style>    

</div>




<div class="page-right-container">
    <!--join premium container-->
    <div class="join-premium-container">
        <p class="cta-text">Watch this video and 1000+ more with Premium</p>
        <a asp-action="JoinNow" asp-controller="Home">JOIN NOW</a>
    </div>

    <!--Suggested videos -->
     @for (int i = 0; i < Model.suggestedVideos.Count; i++)
     {
        <div class="suggested-videos">
            <div class="video">
                <a asp-action="Watch" asp-controller="Video" asp-route-title="@Model.suggestedVideos[i].Title"><img src="~/img/@Model.suggestedVideos[i].ThumbnailUrl" height="100px" width="150px" /> </a>
                <p class="video-title">@Model.suggestedVideos[i].Title</p>
            </div>           
        </div>

     }
</div>

 

<!--JS TO HANDLE ADDING COMMENTS-->
 <script type="text/javascript">
    const commentInput = document.querySelector('.comment-input');
    const commentSubmit = document.querySelector('.comment-submit');
    const commentsContainer = document.querySelector('.comments-section');
    const placeholder = commentInput.querySelector('.placeholdert');
    const btnComment = document.getElementById('btnComment');
    
     btnComment.onclick = function () {
         commentInput.innerHTML = "";
     }
    // Remove the placeholder when the user clicks inside the contenteditable div
    commentInput.addEventListener('click', () => {
        if (placeholder) {
            placeholder.remove();
        }
    });

    // Add the placeholder back if the user clears the comment input
    commentInput.addEventListener('input', () => {
        if (commentInput.textContent.trim() === '') {
            if (!placeholder) {
                const newPlaceholder = document.createElement('span');
                newPlaceholder.classList.add('placeholder');
                newPlaceholder.textContent = 'Add a comment...';
                commentInput.appendChild(newPlaceholder);
            }
        }
    });

    commentSubmit.addEventListener('click', () => {
        const commentText = commentInput.textContent.trim();
        if (commentText) {
            // ... (same as before)
        }
    });
</script>



<script defer type="module">
    import * as THREE from '/js/three.module.js';

    // Get reference to the video player container
    const videoPlayerContainer = document.getElementById('videoPlayerContainer');
    const canvas = document.getElementById('videoCanvas');

    canvas.width = 860;
    canvas.height = 515;

    // Create WebGL renderer with canvas
    const renderer = new THREE.WebGLRenderer({ canvas });

    // Create a scene and camera
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, canvas.width / canvas.height, 0.1, 1000);

    // Create a sphere geometry and add it to the scene
    const geometry = new THREE.SphereGeometry(6, 32, 32); // Radius, width segments, height segments
    const material = new THREE.MeshPhongMaterial({ color: 0x20b2aa, shininess: 80 });
    const sphere = new THREE.Mesh(geometry, material);
    scene.add(sphere);

    // Create edges for visualization (optional)
    const edges = new THREE.EdgesGeometry(geometry);
    const line = new THREE.LineSegments(edges, new THREE.LineBasicMaterial({ color: 0x000000 }));
    scene.add(line);

    //add light
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(1, 1, 2); // Adjust position as needed
    scene.add(directionalLight);

    // Position the camera
    camera.position.z = 10;
    camera.position.y = 0;

    // Function to animate the scene
    function animate() {
        requestAnimationFrame(animate);
        sphere.rotation.x += 0.01;
        sphere.rotation.y += 0.01;
        line.rotation.x += 0.01;
        line.rotation.y += 0.01;
        renderer.render(scene, camera);
    }
    animate();
 
</script>
