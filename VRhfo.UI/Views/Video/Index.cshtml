@model  IPagedList<VRhfo.BL.Models.Video>
@using System.Web
@using X.PagedList.Mvc.Core; 
@using X.PagedList;
@using X.PagedList.Web.Common
@{
    ViewData["Title"] = "Video Gallery";
    string pageTitle = "Trending Now";
}

@if (ViewData["PageTitle"] != null)
{
    pageTitle = ViewData["PageTitle"].ToString();
}

<style>
    #toggleSidebar{
        margin-bottom: -2px !important; 
    }
    body{
        background-color: rgb(21, 21, 21) !important ;
    }
    .card-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
        justify-content: center;
        margin-top: 10px;
        padding: 0 0px; /* Added padding to the side   sfsfs */
        gap: 17px;
        padding-right: 100px;
        width: 100%;
      }

    .card {
        border-radius: 5px;
        text-align: center;
        margin: 0;
        border: none;
        background-color: transparent;
        padding: 0px; /* Moved padding from .card-container to here */
        width: 100%;
        overflow:hidden;
        margin: 0px   !important;
     }

    .vid-img {
        max-width: 100%; /* Changed from a fixed height to a max-width */
        height: 230px;
        min-width: 200px;
        object-fit: cover;
    }
    .card:hover{
/*         box-shadow: 5px 5px 40px 8px rgb(212, 255, 0, .22);
 */        
        box-shadow: 5px 5px 40px 8px var(--primary-color-card-hover);

        cursor: pointer;
        background-color: #282828;
        outline: 2px solid rgba(280,280,280, .1);
     }

    .description {
        background-color: transparent;
        padding: 6px;
        margin: 0;
        font-size: small;
        text-align: left;
        height: auto !important;
        color: #888; /* added color white for text visibility on black background */
        height: auto;
    }

    .navbar{
        background-color: #212121;
    }
  

    @@media (max-width: 1170px) {
        .card-container {
            grid-template-columns: repeat(2, 1fr); /* Create two equal-width columns */
        }
    }

    @@media (max-width: 1000px) {
        .card-container {
             padding: 10px  !important;
        }
    }
    @@media (max-width: 660px) {

        .card{
            max-width: 100vw;
            margin: 0 !important;
             border-radius: 0 !important;
          }      
          .vid-img{
              border-radius: 0 !important;
          }
    }
    @@media(max-width: 550px){
        .card{
        }
    }

    <!--PAGINATION -->
 

        .pagination ul {
            display: inline-block;
        }

        .pagination li {
            display: inline;
            margin: 0 5px;
        }

            .pagination li a {
                color: white;
                background-color: #111;
                padding: 8px 30px;
                border: 1px solid #444;
                font-weight: 800;
                border-radius: 4px;

            }

            .pagination li.active a {
                background-color: #4CAF50 !important;
                color: white;
            }

            .page-links{
        text-align: center;
    }

    .pagination-container { /* Add a container around the pagination */
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative; /* Make the container a positioning reference */
        margin-bottom: 30px; /* Add margin to the bottom to push it away from content */
        margin-top: 110px;
    }

    .pagination {
        position: absolute; /* Position the pagination absolutely within the container */
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
    }

    .pagination a:hover{
        background-color: #222;
    }
    .page-title{
        position: relative;
        font-size: xx-large;
        top: 0px;
        width: 300px;
        background: var(--accent-color);
        -webkit-background-clip: text;
        background-clip: text;
        font-weight: 700;
        -webkit-text-fill-color: transparent;
        margin-top: -8px;
        margin-left: 11px;
        margin-bottom: 9px;
    }   
    .card-img{
        position: relative;
    }

    .time-container{
        position: absolute;
        top: 0;
        right: 0;
        display: flex;
        background-color: rgb(1,1,1,.45);
        border-radius: 5px;
    }

    .card-time {
        color: white !important;
        font-weight: 700 !important;
        padding: 4px;
        font-size: 1rem;
        margin-bottom: 3px;
        margin-right: 7px;
        letter-spacing: -1px;
    }
     
    .d-top-row{
        display:flex;
        justify-content:space-between;
        margin-bottom:5px;
        margin-top: 10px;
     }
    .d-bottom-row{
        text-align: center;
        display: flex;
        justify-content: space-between;
        color: #777;
     }
    .vid-title{
        font-size: 16px;
        color: #ccc;
        margin-bottom: 0 !important;
    }

    .profile-username {
        color: deepskyblue;
    }

     
    .video-index-container{
        width: 100vw;
    }
    .likes{
        font-size: 15px;
        text-align: right;
    }
    .selling-points-container{
        display:flex;
        justify-content: center;
        align-content: center;
        width: 70vw;
 
    }
    .box{
        height: auto;
        width: 100%;
        border: 1px dotted #333;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 10px;
        padding: 10px;
        margin: 10px;
        white-space: pre-line; 
    }
    .left{
       /*  background: #181e00; */
       background: var(--primary-color-dark);
    }
    .right{
        background-image: url('https://front.sexlikereal.com/s/refactor/images/banners/bg-banner-premium-side.jpg');
        background-size: cover; /* This ensures the image covers the entire container */
        background-position: center; /* This centers the image within the container */
     } .right:hover{
         border: 1px solid white;
     }
    .right a{
            color: var(--primary-color) !important;
    }.right a:hover{
            color: var(--primary-color-hover) !important;
    }
    .daily-task-cont{
        display: flex;
        flex-direction: column;
     }
    .task-content{
        font-size: 15px;
        color: #999;
        display: flex;
    }
    .daily-task{
        font-weight: 700;
        font-size: 19px;
        margin-top: -32px;
        color: var(--accent-color);
    }
    .next-task{
        color: #888;
        font-size: 14px;
        margin-left: 10px;
    } .pray-icon{
        margin-right: 7px;
    }
    @@media(max-width: 999px){        
        .task-content {
            font-size: 12px;
        }
        .daily-task {
            font-weight: 700;
            font-size: 15px;
        }
        .next-task {
            font-size: 11px;
        }
        .pray-icon {
           height: 22px !important;
            width: 22px !important;
        }
        .right{
            display: none;
        }
        .selling-points-container{
            margin-left: 0 !important;
        }
    }

    @@media(max-width: 700px) {
        .selling-points-container{
            flex-direction: column;
            width: 95vw;            
        }
        .box{
            margin-top: -15px;
        }
        .card-container{
            margin-top: 2px !important;
        }
        .page-title{
            margin-top: 8px !important;
        }

        .selling-points-container {
             margin-top: 20px !important;
        }
    }

    input[type="checkbox"] {
        /* Add if not using autoprefixer */
        -webkit-appearance: none;
        appearance: none;
        background-color: #000 !important;
        margin: 0;
      
    }

    input[type="checkbox"] {
        /* ...existing styles */
        display: grid;
        place-content: center;
    }

        input[type="checkbox"]::before {
            content: "";
            width: 1.35em;
            height: 1.57em;
            transform: scale(0);
            transition: 120ms transform ease-in-out;
            box-shadow: inset 1em 1em var(--primary-color);
        }

        input[type="checkbox"]:checked::before {
            transform: scale(1);
        }

        input[type="checkbox"]:checked .left{
            background: darkgreen !important;
        }
        input[type="checkbox"]::before {
            /* ...existing styles */

            transform-origin: bottom left;
            clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
        }

    input[type="checkbox"] {
        appearance: none;
        background-color: #fff;
        margin: 0;
        font: inherit;
        color: currentColor;
        width: 1.75em;
        height: 1.75em;
        border: 0.15em solid currentColor;
        border-radius: 0.15em;
        transform: translateY(-0.075em);
        margin-top: 14px;
        margin-left: 10px;
    } .vipp{
        color: var(--primary-color);
        
    }
    .jon{
        font-weight: 700;
    }

    @@media(max-width: 430px){
        .welcum{
            margin-top: 10px !important;
        }
    }
</style>

<div class="video-index-container">

    <div class="selling-points-container">
        <div class="box left">
            <img class="pray-icon" src="~/img/prayer.png" height="30" width="30" />

            <div class="daily-task-cont">
                <div class="daily-task">
                   Daily Task  <span class="next-task">Next: 2h</span>
                </div>
                <div class="task-content">
                    <div class="daily-text">Subcribe to <span class="vipp">VIP</span> and track daily tasks, each one carefully designed to increase your addiction to Porn.
                    </div>

                        <input type="checkbox" name="checkbox-checked"   />

                </div>

            </div>
        </div>
        <div class="box right "><a class="jon" asp-action="JoinNow" asp-controller="Home">JOIN VIP</a></div>
    </div>
    <div class="page-title">
        @pageTitle

        @{
            switch (pageTitle)
            {
                case "Latest":
                    <img class="cat-icon" src="~/img/new (1).png" />
                    break;
                case "Brainwashing":
                    <img class="cat-icon" src="~/img/cogwheel.png" />
                    break;
                case "Gooning":
                    <img class="cat-icon" src="~/img/hypnosis.png" />
                    break;
                case "HFO":
                    <img class="cat-icon" src="~/img/prohibition.png" />
                    <h6>(Hands Free Orgasm)</h6>
                    break;
                case "Hypnosis":
                <img class="cat-icon" src="~/img/hypnosis (2).png">
                    break;
                case "Trending Now":
                    <svg class="fire-svg" xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="grey" class="bi bi-fire" viewBox="0 0 16 16">
                        <path d="M8 16c3.314 0 6-2 6-5.5 0-1.5-.5-4-2.5-6 .25 1.5-1.25 2-1.25 2C11 4 9 .5 6 0c.357 2 .5 4-2 6-1.25 1-2 2.729-2 4.5C2 14 4.686 16 8 16m0-1c-1.657 0-3-1-3-2.75 0-.75.25-2 1.25-3C6.125 10 7 10.5 7 10.5c-.375-1.25.5-3.25 2-3.5-.179 1-.25 2 1 3 .625.5 1 1.364 1 2.25C11 14 9.657 15 8 15" />
                    </svg>
                    break;
            }
        }
    </div>
    <div class="card-container">
        @foreach (var item in Model)
        {
            <div class="card">
                <a asp-controller="Video" asp-action="Watch" asp-route-title="@item.Title.Replace(' ', '-')">
                    <div class="card-img">
                        <img class="vid-img" src="@item.ThumbnailUrl" alt="@item.Title" style="width: 100%;">

                        <!-- Add video element for preview -->
                        <video class="preview-video"
                               preload="none"
                               muted
                               loop
                               playsinline
                               webkit-playsinline
                               data-preview-src="@item.PreviewVideoURL">
                            <source src="" type="video/mp4">
                        </video>

                        <!-- Views overlay (top-left) -->
                        <div class="card-views-overlay">
                            <img src="~/img/vision.png" />
                            @item.FormattedViews
                        </div>

                        <!-- Time overlay (top-right) -->
                        <div class="time-container">
                            <p class="card-time"><i class="fas fa-clock"></i> @item.FormattedDuration </p>
                        </div>

                      @*   <!-- Title overlay (bottom) -->
                        <div class="card-title-overlay">
                            @item.TruncatedTitle
                        </div> *@
                    </div>

                    <!-- Optional: keep metadata below if you still want it -->
                    <div class="description">
                        <div class="d-top-row">
                            <div class="title-rating-wrapper">
                                <h5 class="vid-title">@item.TruncatedTitle</h5>
                                <div class="vid-rating">
                                    <svg class="like-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="#7fff00">
                                        <path d="M1 21h4V9H1v12zM23 10.5c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 2 7.59 8.59C7.22 8.95 7 9.45 7 10v9c0 1.1.9 2 2 2h8c.78 0 1.48-.45 1.82-1.12l3.02-6.03c.1-.18.16-.39.16-.6v-2.25z" />
                                    </svg>
                                    <span>@item.AverageRating%</span>
                                </div>
                            </div>
                        </div>
@*                         <div class="details-bottom-row">
                            <div class="upload-date">@item.FormattedUploadDate</div>
                            <div class="details-views">
                                <img src="~/img/vision.png" height="20" width="20" /> @item.FormattedViews views
                            </div>

                        </div> *@
            </div>
                </a>
            </div>
        }

</div>


    <div class="pagination-container">
        <div class="pagination">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), PagedListRenderOptions.OnlyShowFivePagesAtATime)
        </div>
    </div>
</div>

 <style>
    .d-top-row .title-rating-wrapper {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        gap: 12px;
        flex-wrap: wrap;
    }

    .vid-title {
        flex: 1;
        min-width: 0;
        margin: 0;
        font-size: 14px;
        color: white;
        line-height: 1.2;
    }

    .vid-rating {
        white-space: nowrap;
        display: flex;
        align-items: center;
        gap: 4px;
        font-weight: bold;
        color: var(--primary-color);
        flex-shrink: 0;
    }
    .like-icon {
        margin-right: 4px;
        vertical-align: middle;
        transition: transform 0.2s ease, filter 0.2s ease;
        filter: drop-shadow(0 0 4px #7fff00aa);
    }

        .like-icon:hover {
            transform: scale(1.1);
            filter: drop-shadow(0 0 8px #7fff00);
        }
    .card-img {
        position: relative;
        overflow: hidden;
    }

    .preview-video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center center;
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
    }

    .vid-img {
        transition: opacity 0.3s ease;
    }

    /* Overlays transition */
    .card-views-overlay,
    .time-container,
    .card-title-overlay {
        transition: opacity 0.3s ease;
        z-index: 10;
    }

    /* Remove desktop hover CSS completely - handle in JS */
    @@media (hover: hover) and (pointer: fine) {
        /* Remove all hover states - we'll handle in JavaScript */
    }

    /* Video playing state for desktop */
    .card.video-playing .preview-video {
        opacity: 1;
    }

    .card.video-playing .vid-img {
        opacity: 0;
    }

    .card.video-playing .card-views-overlay,
    .card.video-playing .time-container,
    .card.video-playing .card-title-overlay {
        opacity: 0;
    }

    /* Mobile preview state */
    .card.preview-active .preview-video {
        opacity: 1;
    }

    .card.preview-active .vid-img {
        opacity: 0;
    }

    .card.preview-active .card-views-overlay,
    .card.preview-active .time-container,
    .card.preview-active .card-title-overlay {
        opacity: 0;
    }







    .card-img {
        position: relative;
        overflow: hidden;
    }

    .card-title-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        padding: 6px 10px;
        background: rgba(0, 0, 0, 0.65);
        color: #fff;
        font-weight: bold;
        font-size: 15px;
        text-shadow: 1px 1px 2px #000;
    }


    .card-views-overlay {
        position: absolute;
        top: 5px;
        left: 5px;
        background: rgba(0, 0, 0, 0.5);
        color: white;
        font-size: 13px;
        padding: 4px 8px;
        border-radius: 5px;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .card-views-overlay img {
            width: 16px;
            height: 16px;
            filter: brightness(1.5);
        }

     .details-bottom-row{
         display: flex;
         justify-content: space-between;
         font-size: 12px;
     }
     @@media(max-width: 600px){
           
      
     
     }
      
     @@media(max-width: 548px){
        .card-title-overlay {
        
            background: rgba(0, 0, 0, 0.45);
           
        }
 

        .vid-title {
            font-size: medium !important;
             margin-bottom: -2px;
        }

        .likes {
            font-size: x-small !important;
            margin-bottom: -4px;
        }

        .like-icon {
            height: 12px !important;
            width: 12px !important;
        }

        .d-bottom-row {
            font-size: xx-small;
        }
     }
     
    @@media(max-width: 514px) {
        .card-container {
             padding: 0 !important;
        }
    }
    @@media(max-width: 550px) {
        .card-container {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
         }
 
       
        .likes{
            font-size: x-small !important;
            margin-bottom: -4px;
        }   .like-icon{
            height: 12px !important;
            width: 12px !important;

        }
        .d-bottom-row {
            font-size: xx-small;
        }

        .upload-date {
            font-size: x-small !important;
        }
    }

    .audio-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0,0,0,0.7);
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        cursor: pointer;
        z-index: 10;
    }
 </style>
 <script>
    document.addEventListener('DOMContentLoaded', function() {
        const cards = document.querySelectorAll('.card');
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

        let currentPreviewCard = null;
        let currentPreviewVideo = null;

        function stopCurrentPreview() {
            if (currentPreviewCard && currentPreviewVideo) {
                currentPreviewVideo.pause();
                currentPreviewVideo.currentTime = 0;
                currentPreviewCard.classList.remove('preview-active');
            }
            currentPreviewCard = null;
            currentPreviewVideo = null;
        }

        cards.forEach(card => {
            const video = card.querySelector('.preview-video');
            const previewSrc = video.dataset.previewSrc;

            let hoverTimeout;
            let isVideoLoaded = false;

            // Mobile touch handling
            if (isMobile) {
                let touchStartY = 0;
                let touchStartX = 0;
                let touchStartTime = 0;
                let hasStartedPreview = false;
                let previewTimeout;
                let currentTouchCard = null; // Track which card is being touched

                card.addEventListener('touchstart', function(e) {
                    // Stop event bubbling
                    e.stopPropagation();

                    touchStartY = e.touches[0].clientY;
                    touchStartX = e.touches[0].clientX;
                    touchStartTime = Date.now();
                    hasStartedPreview = false;
                    currentTouchCard = card; // Set this card as the touched one

                    clearTimeout(previewTimeout);

                    previewTimeout = setTimeout(() => {
                        if (!hasStartedPreview && currentTouchCard === card) {
                            const currentY = e.touches && e.touches[0] ? e.touches[0].clientY : touchStartY;
                            const currentX = e.touches && e.touches[0] ? e.touches[0].clientX : touchStartX;
                            const deltaY = Math.abs(currentY - touchStartY);
                            const deltaX = Math.abs(currentX - touchStartX);

                            if (deltaY > 5 || deltaX > 5) {
                                startPreview();
                            }
                        }
                    }, 400);
                }, { passive: false }); // Changed to non-passive so we can stopPropagation

                card.addEventListener('touchmove', function(e) {
                    // Only handle if this is the card that was originally touched
                    if (currentTouchCard !== card) return;

                    e.stopPropagation();

                    const touchY = e.touches[0].clientY;
                    const touchX = e.touches[0].clientX;
                    const deltaY = Math.abs(touchY - touchStartY);
                    const deltaX = Math.abs(touchX - touchStartX);
                    const touchDuration = Date.now() - touchStartTime;

                    if ((deltaY > 10 || deltaX > 10) && touchDuration > 100 && !hasStartedPreview) {
                        startPreview();
                    }
                }, { passive: false });

                card.addEventListener('touchend', function(e) {
                    // Only handle if this is the card that was originally touched
                    if (currentTouchCard !== card) return;

                    clearTimeout(previewTimeout);
                    currentTouchCard = null; // Clear the touched card

                    if (hasStartedPreview) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });

                function startPreview() {
                    if (hasStartedPreview) return;

                    hasStartedPreview = true;
                    stopCurrentPreview();

                    currentPreviewCard = card; // Make sure we're using the correct card
                    currentPreviewVideo = video; // Make sure we're using the correct video

                    card.classList.add('preview-active');

                    if (!isVideoLoaded && previewSrc) {
                        video.src = previewSrc;
                        video.load();
                        isVideoLoaded = true;
                    }

                    video.currentTime = 0;
                    video.play().catch(e => {
                        console.log('Video play failed:', e);
                    });
                }
            }
            // Desktop hover handling
            else {
                    card.addEventListener('mouseenter', function() {
        hoverTimeout = setTimeout(() => {
            if (!isVideoLoaded && previewSrc) {
                video.src = previewSrc;

                // Wait for video to be ready before playing
                const handleCanPlay = function() {
                    video.currentTime = 0;

                    const handlePlaying = function() {
                        card.classList.add('video-playing');
                        card.classList.add('preview-active'); // Add this for consistency
                        video.removeEventListener('playing', handlePlaying);
                    };

                    video.addEventListener('playing', handlePlaying);

                    video.play().catch(e => {
                        console.log('Video play failed:', e);
                        video.removeEventListener('playing', handlePlaying);
                    });

                    video.removeEventListener('canplay', handleCanPlay);
                };

                video.addEventListener('canplay', handleCanPlay);
                video.load();
                isVideoLoaded = true;
            } else if (isVideoLoaded) {
                // Video already loaded, just play it
                video.currentTime = 0;

                const handlePlaying = function() {
                    card.classList.add('video-playing');
                    card.classList.add('preview-active');
                    video.removeEventListener('playing', handlePlaying);
                };

                video.addEventListener('playing', handlePlaying);

                video.play().catch(e => {
                    console.log('Video play failed:', e);
                    video.removeEventListener('playing', handlePlaying);
                });
            }
        }, 500);
    });

    card.addEventListener('mouseleave', function() {
        clearTimeout(hoverTimeout);
        video.pause();
        video.currentTime = 0;
        card.classList.remove('video-playing');
        card.classList.remove('preview-active'); // Add this for consistency
    });
            }
        });

        if (isMobile) {
            // Stop preview when touching outside of cards
            document.addEventListener('touchstart', function(e) {
                const touchedCard = e.target.closest('.card');
                if (!touchedCard && currentPreviewCard) {
                    stopCurrentPreview();
                }
            }, { passive: true });
        }
    });







         document.addEventListener('DOMContentLoaded', function() {
        const cards = document.querySelectorAll('.card');

        cards.forEach(card => {
            const video = card.querySelector('.preview-video');
            const previewSrc = video.dataset.previewSrc;

            let hoverTimeout;
            let isVideoLoaded = false;

            card.addEventListener('mouseenter', function() {
                // Delay before starting preview to avoid loading on quick hovers
                hoverTimeout = setTimeout(() => {
                    if (!isVideoLoaded && previewSrc) {
                        video.src = previewSrc;
                        video.load();
                        isVideoLoaded = true;
                    }

                    video.currentTime = 0;
                    video.play().catch(e => {
                        console.log('Video play failed:', e);
                    });
                }, 500); // 500ms delay
            });

            card.addEventListener('mouseleave', function() {
                clearTimeout(hoverTimeout);
                video.pause();
                video.currentTime = 0;
            });
        });
    });


    const checkbox = document.querySelector('input[type="checkbox"]');
    const leftElement = document.querySelector('.left');

    checkbox.addEventListener('change', function () {
        if (this.checked) {
            leftElement.style.background = 'transparent';
        } else {
            leftElement.style.background = '#1f2700'; // Reset to default
        }
    });

    document.querySelectorAll('.card a').forEach(function (anchor) {
        anchor.addEventListener('click', function (event) {
            // Disable the anchor tag after click to prevent double clicking
            event.target.disabled = true;
        });
    });
 </script>